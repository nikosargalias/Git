--storing your gitHub username and pass on mac--
    § git credential-osxkeychain //checks if keychain is installed
    § config --global credential.helper osxkeychain
        --windows--
            You need 'git credential manager for windows' //download and follow guide

--clone--
Clones the repository to your local machine
    to clone a repo copy the URL from the code button on github and paste in terminal:
        § git clone URL //clones the github repo whenever your current directory is (use cd to change)
        § git clone URL customName //same as above but choses a custom name for the local copy

--origin/master--
    When you clone a repo from github, it creates a remote tracking branch to the master branch of the remote repository. It names this branch origin/master. So your local master branch and the remote origin/master branch should be synchronised and reference the same commits. Of course you will be using the follwoing push and pul commands to update the remote with the latest version of your local master and visa-versa.

--push--
Send your commits to the central repository.

--pull--
Bring in any unsynchronised commits from the centralised repo into your local repo that isn't synchronised in your local repo. You must resolve conflicts (if any), and push your resolved conflits to the centralised repo. 

--fork--
Copies the main repository in the cloud

//Remote Repos & Branches
--git remote--
    § git remote -v //shows the remote repositories on github

--see differences between latest git branch and local master branch--
    § git log --vv

--fetch+merge--
--if remote repo has newer commits which are not on local repo--
    If commits have been made on the remote repository branch which have not been made on the local repository branch, then you need before you push (commit) your changes to the remote branch, you need to merge the newer remote branch with your local branch. You do this with the following command:
        § git fetch //fetches the latest commit and assigns it to the origin/master branch
        § git branch -vv //shows how many commits the local master branch is behind the remote one
        § git switch master //switch to master
        § git merge origin/master //there is a local branch under the name origin/master which always references the latest snapshop of the remote repository, so you simply have to merge that to your local one. 

--git pull--
    Pull effectively fetches and merges in one command rather than having to fetch the latest version of remote repo and then merge it. By default, pull only updates the current branch that you're on, not all other tracking branches (even if remote tracking branches exist). 
    There are two options with pull:
        § git pull 
            //fetches the latest version of remote repo and merges it with local master, this can create a three way merge is they have diverged or fast forward if they haven't.
        § git pull --rebase 
            //this rebases the local master branch on top of the remote origin/master - so the base of the local master branch becomes whatever the latest remote branch snapshop is. 
        § git pull --all --rebase  
            //updates all branches, not just the one you're on.
        How it works?
            Rebasing works by transferring each local commit to the updated master branch one at a time. This means that you catch merge conflicts on a commit-by-commit basis rather than resolving all of them in one massive merge commit. This keeps your commits as focused as possible and makes for a clean project history. In turn, this makes it much easier to figure out where bugs were introduced and, if necessary, to roll back changes with minimal impact on the project.


--git push--
    Push allows you to updated your remote repository with the new commits made on your local repository. 
        § git push 
            //this will push your master branch to the origin/master branch 
        § git push origin/master master 
            //this does exactly the same thing but it allows you to specify which remote branch and which local branch you want, in case you don't want to push the master to the origin/master by default. 
    --my push got rejected?--
        This would be because someone else made a push before you, and you haven't fetched the latest version from the remote repo to your local one. Therefore your histories have evolved differently and git prevents you from ovewriting someone elses work.
            --how to resolve?--
                § git push -f 
                    //NEVER do this as it will overwrite the commits made by other people since your last fetch. Only ever do this if you are explicitely overwriting some mistaked made, and even then, you don't have to use this method. 
                § git pull 
                    //this will fetch and merge the latest commits from the remote repo which do not exist in your local branch. 
                § git push // now push will work

--remote branches for collaboration--
    Regularely, all of your branches will be local, so you will have to merge them with your master branch and then push the latest version of your master branch to origin/master (remote repo). However, what if you want to collaborate with other people on a side branch?
        You can do this by pushing your local branches to the remote repo with the following command:
    § git push --set-upstream origin targetBranchName 
    § git push -u origin targetBranchName //this is shorthand for --set-upstream
        //this will push your local targetBranch, to the remote repo (origin) and create a branch in the remote repo origin that is directly linked to your local branch. 
    § git push -d origin targetBranchName 
        //delete the branch from the remote repo (not from local one) after you have merged it with master. 
    § git branch -d targetBranchName  
        //deletes branch from local repo. 
    § git branch -vv 
        //this will display the link that was created between your local and remote branch.
    § git branch -r    
        //this will display all the remote tracking branches. 
    § git remote prune origin
        //this removes any remote tracking branches that no longer exist on origin.
            An alternative to this is:
        § git fetch -p //this removed any remote branches that no longer exist on your local machine.
--branches created on github--
        § git pull --rebase
            //fetches all the data from the remote repo (including branches that exist in remote repo but not in local repo), however you only receive remote tracking branches, so if you want to work on it, you have to 
        § git switch -C targetBranchName origin/remoteTrackingBranchName
            This will create a local branch that is linked to the remote tracking branch that was downloaded from the fetch command. 
    IMPORTANT: 
        Once you create a remote tracking branch with § git push -u, you still have to use the regular push command to update the remote branch with your latest local commits, vise-versa for fetching the latest version of the remote branch, as colleagues of yours may have added commits to it. 
            NOTE: If you try to push a branch to the remote repo with the normal push command, git will through an error saying "the current branch has no upstream (remote) branch linked to it"
    --Updating remote branch with local changes--
        Make sure your HEAD is on the branch that you want, and that it is linked to a remote tracking branch (See above). Then you simply type:
            § git push 
                //this is equivalent to § git push targetBranchName remoteTrackingBranchName



--remote tags--
    By default the push command doesn't track the tags you have added to your local repo, you have to explicitly push them. Github allows you to download the source code for each commit that is tagged. 
    § git push --tags
        //pushes all tags
    § git push origin TAGNAME
        //this will push the tagName to the origin branch in github, but will not mess with any commits. It will simply apply the tagName to the latest commit in the origin branch in the remote repository. 
    § git push origin --delete TAGNAME
        //this will remove the tag from the remote repository
            note: you still have to remove it from local repo.
    § git tag -f tagName newCommitId 
        //changes which commit a tag points to

--github releases--
    This feature allows you to release ready versions of your project. 
        Navigate to tags-releases and set up the release. You can also add non binary files such as your compiled bundle file from webpack in this relase. 


--pull request--
    This submits a branch that you created and edited for review by one of the maintainers of the project. If they aprove your changes, they can merge the branch into the master branch.
    - go to github
    - select the branch you want
    - click create pull request
        base: master // this is the base branch that should be the master branch upon which the other branch will be merged into. 
        compare: this is the branch that will be reviewed. 
    --RESOLVING CONFLICTS WITH PULL REQUESTS--
        Two ways:
            1: You can simply push the busson on github which will be automatically displayed called 'Resolve conflicts" (easiest)
            2: The mainterner in charge of reviewing, will pull the latest version of the remote repo into their local machine, switch to the branch they need to review, merge it with the master branch and they will have to resolve the conflicts using their code editor as normal. They can also abort the merge if they choose to before they commit the changes. Once they finish the merge, they push the latest changes to the remote repo.
    --pull request workflow--
        A developer creates the feature in a dedicated branch in their local repo.
        The developer pushes the branch to a public Bitbucket repository.
        The developer files a pull request via Bitbucket.
        The rest of the team reviews the code, discusses it, and alters it.
        The project maintainer merges the feature into the official repository and closes the pull request



--issues / milestones--
    A better way to think of issues is tasks. You can set tasks for developers with issues. You create a new issue and assign someone to fix it. Issues can also be new features that are implemented. Finally, you can also assign issues to milestones. For example, a milestone can be the release version of a project (v2.0), you can assign any issue/task to a milestone, and once all of the issues have been completed, the milestone is complete. 

--contributing to open source projects--
    - First you need to fork the repository. So, you go to the repo whch you want to contribute to and push the fork button. 
    - Then the repo will be copied and added to your own github repositories, at which point you can follow the regular proceedure (copy the URL and past it into the terminal with § git clode URL).
    - Create a new branch and make the commits you want and link it with the remote repository. 
    - When you are finished, you can create a pull request so that the moderator of the project can review and potentially merge the changes you made with the base repository master branch. 
        //What a pull request does here is basically request to the upstream repository to merge your changes to the upstream repo. 
--Keeping your forked repo up to date with the original--
    By default, your forked repository will not update itself whenever a commit is made to the original repo. So you have to go through the following steps in order to keep your forked one up to date:
        1: § git remote add upstream URLOfOriginalRepo 
            //this will add tracking to the original repository in addition to the forked one which should alsready be tracked. Note: upstream is simply a name you give it, but it's a common name. 
        2: § git remote -v 
            //shows the remote repos that are being tracked, at this point it should be your forked one and the original one. 
        3: § git fetch upstream  
            //this will fetch download the latest data from the upstream repo. 
        4: § git switch master 
            //switch to your local master
        5: § git merge upstream/master
            //merges the latest master branch of the upstream repo with your local master branch.
        6: § git push
            //pushes the changes into your forked repo.
    --extra commands--
        - § git remote rename upstream base //renames the remote repo from upstream to base 
        - § git remote rm base 
            //removes the remote repo named base. 
    --tip--
        It's a good idea to merge the local master branch into whatever other branch you're working on before creating a pull request, as you can resolve conflicts yourself so that when you create a pull request the moderator doesn't have to do as much work. Keep in mind, in this case you are switching to the feature branch, and merging the master with it, becuase you need to create a pull request with the feature branch, not the master! 
